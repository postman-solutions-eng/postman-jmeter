name: JMeter Load Test (workflow_dispatch)

on:  
  workflow_dispatch:
    inputs:
      workspaceID:
        description: 'ID of the workspace to send results to'
        required: true
        # default: 'warning'
        type: string
      variableStrategy:
        description: 'Resolve variable values, or transform to JMeter syntax'
        required: false
        default: 'resolve'
        type: choice
        options:
        - resolve
        - transform
      collectionPath:
        description: 'Path in repo to collection to test'
        required: true
        type: string
        default: './examples/catfact-coll.json'
      envFile:
        description: 'Exported Postman environment file'
        required: false
        type: string
        default: " "
        
  
jobs:
  load-test-with-jmeter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Resolve environment variables (wkflow dispatch)
        if: ${{ github.event_name  == 'workflow_dispatch' }}
        run: |
          echo "WORKSPACE_ID=${{ inputs.workflowID }}" >> $GITHUB_ENV
          echo "VARIABLE_STRATEGY=${{ inputs.variableStrategy }}" >> $GITHUB_ENV
          echo "COLLECTION_PATH=${{ inputs.collectionPath }}" >> $GITHUB_ENV
          echo "ENVIRONMENT_FILE=${{ inputs.envFile }}" >> $GITHUB_ENV
          echo "Var Strat: ${{ inputs.variableStrategy }}"
          echo "Var Strat env: ${{ env.VARIABLE_STRATEGY }}"
          set
      - name: Resolve environment variables (repo dispatch)
        if: ${{ github.event_name  == 'repository_dispatch' }}
        run: |
          echo "WORKSPACE_ID=${{ github.event.client_payload.workspaceID }}" >> $GITHUB_ENV
          echo "VARIABLE_STRATEGY=${{ github.event.client_payload.variableStrategy }}" >> $GITHUB_ENV
          echo "COLLECTION_PATH=${{ github.event.client_payload.collectionPath }}" >> $GITHUB_ENV
          echo "ENVIRONMENT_FILE"=${{ github.event.client_payload.environmentFile }}" >> $GITHUB_ENV
          echo "Var Strat: ${{ github.inputs.variableStrategy }}"
          set
      - name: Install postman to jmeter converter
  #  #     run: | 
  #  #       npm install -s postman-jmeter
        run: | 
          npm install
  #     - name: install jmeter
  #       run: |
  #         java -version
  #         wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.zip
  #         unzip apache-jmeter-5.5.zip
  #         cd apache-jmeter-5.5/bin
  #         ./jmeter -v
  #         pwd
      - name: Convert postman collection (no env)
        if: ${{ env.ENVIRONMENT_FILE  == ' ' }}
        run: | 
          echo "Collection path: " $COLLECTION_PATH
          echo "Variable Strategy: " $VARIABLE_STRATEGY
          node ./bin/convert-postman-jmeter -p $COLLECTION_PATH -j jmeter.jmx -o -v=$VARIABLE_STRATEGY
      - name: Convert postman collection (with env)
        if: ${{ env.ENVIRONMENT_FILE  != ' ' }}
        run: | 
          node ./bin/convert-postman-jmeter -p $COLLECTION_PATH -j jmeter.jmx -o -v=$VARIABLE_STRATEGY -e=$ENVIRONMENT_FILE         

      # - name: Run Stress Tests
      #   run: |
      #     cd ./apache-jmeter-5.5/bin 
      #     ./jmeter -n -t ${{ github.workspace }}/jmeter.jmx -l ${{ github.workspace }}/results.csv -e -o ${{ github.workspace }}/output
      # - name: Generate screenshot of JMeter results
      #   run: |
      #     npm install --global capture-website-cli
      #     capture-website output/index.html --output=screenshot_${{ github.run_id }}.png --width 1280 --height 800
      # - name: Archive production artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: jmeter-load-test-image
      #     path: screenshot_${{ github.run_id }}.png
      # - name:  Add image to repo
      #   run: |
      #     git config --local user.name "github-actions[bot]"
      #     git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git status
      #     mkdir -p assets/images/
      #     mv screenshot_${{ github.run_id }}.png assets/images/
      #     git add assets/images/screenshot_${{ github.run_id }}.png
      #     git commit -m "added assets/images/screenshot_${{ github.run_id }}.png"
      #     git push
      #     git status
      #     echo "https://github.com/${{github.repository}}/blob/main/assets/images/screenshot_${{ env.GITHUB_RUN_ID }}.png?raw=true"
      # - name: Send results to postman
      #   run: | 
      #     node ./bin/respond -w  $WORKSPACE_ID -u https://github.com/postman-solutions-eng/postman-jmeter/blob/main/assets/images/screenshot_${{ github.run_id }}.png -r $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID -k ${{ secrets.POSTMAN_API_KEY }} -n $GITHUB_WORKFLOW-$GITHUB_RUN_ID

